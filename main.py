import logging
import asyncio
import os
import string
import requests

from datetime import datetime

from aiogram import Bot, Dispatcher, Router, types
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

class Form(StatesGroup):
    date1 = State()
    date2 = State()
    date1utm = State()
    date2utm = State()

choicestart = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üìä –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∞–π—Ç–∞ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥", callback_data="checkstat")],
    [InlineKeyboardButton(text="üìä –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∞–π—Ç–∞ —Å UTM –º–µ—Ç–∫–∞–º–∏", callback_data="checkstatutm")]
]) # –ö–Ω–æ–ø–∫–∏

choice = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="1Ô∏è‚É£ –í—á–µ—Ä–∞", callback_data="yesterday")],
    [InlineKeyboardButton(text="2Ô∏è‚É£ –ù–µ–¥–µ–ª—è", callback_data="week")],
    [InlineKeyboardButton(text="3Ô∏è‚É£ –ú–µ—Å—è—Ü", callback_data="month")],
    [InlineKeyboardButton(text="üîÑ –£–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫", callback_data="otherdate")]
])

logging.basicConfig(level=logging.INFO)

BOT_TOKEN = os.environ["TOKEN"]

bot = Bot(token=BOT_TOKEN) # —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥–µ
dp = Dispatcher() # –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
router = Router() # –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–æ—É—Ç–µ—Ä–∞
YANDEX_METRIKA_TOKEN = os.environ["TOKEN_YANDEX"]
COUNTER_ID = os.environ["COUNTER_ID"]

choicestat = None

start_date = datetime.today().replace(day=1).strftime("%Y-%m-%d")
end_date = datetime.today().strftime("%Y-%m-%d")

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –Ø–Ω–¥–µ–∫—Å –ú–µ—Ç—Ä–∏–∫–∏
class YandexMetrica:
    def __init__(self, token):  # –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–∞, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π —Ç–æ–∫–µ–Ω API
        self.token = token  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ –æ–±—ä–µ–∫—Ç–µ
        self.base_url = "https://api-metrika.yandex.net/stat/v1/data"  # –ë–∞–∑–æ–≤—ã–π URL API

    def get_data(self, counter_id, params):  # –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        headers = {  # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
            "Authorization": f"OAuth {self.token}"  # –ü–µ—Ä–µ–¥–∞—ë–º —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
        }
        params['ids'] = counter_id  # –î–æ–±–∞–≤–ª—è–µ–º ID —Å—á–µ—Ç—á–∏–∫–∞ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        response = requests.get(self.base_url, headers=headers, params=params)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET-–∑–∞–ø—Ä–æ—Å
        print(response)  # –í—ã–≤–æ–¥–∏–º –æ–±—ä–µ–∫—Ç –æ—Ç–≤–µ—Ç–∞ –≤ –∫–æ–Ω—Å–æ–ª—å

        if response.status_code == 200:  # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω (–∫–æ–¥ 200)
            return response.json()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º JSON-–æ—Ç–≤–µ—Ç
        else:
            logging.error(f"Error: {response.status_code}, {response.text}")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            if response.status_code == 403:  # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ 403 (–¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω)
                logging.error("Access Denied: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—á–µ—Ç—á–∏–∫—É.")  # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            return None  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –¥–∞—Ç–æ–π

def is_date(text):
    allowed_chars = string.digits + "-"  # –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (—Ü–∏—Ñ—Ä—ã –∏ –¥–µ—Ñ–∏—Å)
    for char in text:  # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª—ã –≤ —Å—Ç—Ä–æ–∫–µ
        if char not in allowed_chars:  # –ï—Å–ª–∏ —Å–∏–º–≤–æ–ª –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö
            return False  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º False
    return True  # –ï—Å–ª–∏ –≤—Å—ë –æ–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True

@router.message(CommandStart())  # –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
async def start_command(message: types.Message):
    await message.answer("ü§ñ –≠—Ç–æ –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ø–Ω–¥–µ–∫—Å –ú–µ—Ç—Ä–∏–∫–æ–π. –ù–∞–∂–º–∏ –Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.", reply_markup=choicestart)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π –¥–∞—Ç—ã (–Ω–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞)
@router.message(Form.date1)
async def date1(message: types.Message, state: FSMContext):
    if is_date(message.text):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–µ–¥—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–∞—Ç–æ–π
        await state.update_data(date1=message.text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(Form.date2)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await message.answer("‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É –ø–æ –∫–∞–∫–æ–µ —á–∏—Å–ª–æ, –º–µ—Å—è—Ü –∏ –≥–æ–¥ –Ω—É–∂–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–ø—Ä–∏–º–µ—Ä: 2025-02-28)")  # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ç–æ—Ä—É—é –¥–∞—Ç—É
    else:
        await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞—Ç—ã (–ø—Ä–∏–º–µ—Ä: 2025-11-11)")  # –°–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ –≤–≤–æ–¥–∞

# –ê–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π —Ö—ç–Ω–¥–ª–µ—Ä, –Ω–æ –¥–ª—è UTM-–º–µ—Ç–æ–∫
@router.message(Form.date1utm)
async def date1utm(message: types.Message, state: FSMContext):
    if is_date(message.text):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É
        await state.update_data(date1utm=message.text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ state
        await state.set_state(Form.date2utm)  # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await message.answer("‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É –ø–æ –∫–∞–∫–æ–µ —á–∏—Å–ª–æ, –º–µ—Å—è—Ü –∏ –≥–æ–¥ –Ω—É–∂–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–ø—Ä–∏–º–µ—Ä: 2025-02-28)")
    else:
        await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞—Ç—ã (–ø—Ä–∏–º–µ—Ä: 2025-11-11)")

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ç–æ—Ä–æ–π –¥–∞—Ç—ã –∏ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@router.message(Form.date2)
async def date2(message: types.Message, state: FSMContext):
    dataaa = await state.get_data()  # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if is_date(message.text):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É
        metrika = YandexMetrica(YANDEX_METRIKA_TOKEN)  # –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç API

        params = {
            "ids": COUNTER_ID,
            "metrics": "ym:s:visits,ym:s:pageviews,ym:s:users,ym:s:newUsers,ym:s:bounceRate,ym:s:avgVisitDurationSeconds",
            "date1": dataaa.get('date1'),
            "date2": message.text,
            "accuracy": "full"
        }

        data = metrika.get_data(COUNTER_ID, params)  # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        print("Raw data from Yandex Metrica:")
        print(data)  # –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

        response_text = ""  # –°—Ç—Ä–æ–∫–∞ –æ—Ç–≤–µ—Ç–∞

        if data and data['data']:  # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã
            report_data = data['data'][0]
            
            metrics_data = report_data.get('metrics')  # –î–æ—Å—Ç–∞—ë–º –º–µ—Ç—Ä–∏–∫–∏
            if metrics_data and isinstance(metrics_data, list):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
                visits = metrics_data[0] if len(metrics_data) > 0 else 0  # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
                pageviews = metrics_data[1] if len(metrics_data) > 1 else 0
                users = metrics_data[2] if len(metrics_data) > 2 else 0
                new_users = metrics_data[3] if len(metrics_data) > 3 else 0
                bounce_rate = metrics_data[4] if len(metrics_data) > 4 else 0
                avg_duration = metrics_data[5] if len(metrics_data) > 5 else 0
                
                response_text = (
                    f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫: {dataaa.get('date1')} - {message.text}\n\n"
                    f"üëÅ –ü–æ—Å–µ—â–µ–Ω–∏—è: {int(visits)}\n"
                    f"üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü: {int(pageviews)}\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {int(users)}\n"
                    f"üÜï –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {int(new_users)}\n"
                    f"üìâ –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–∫–∞–∑–æ–≤: {bounce_rate:.2f}%\n"
                    f"‚è±Ô∏è –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–∑–∏—Ç–∞: {int(avg_duration // 60)} –º–∏–Ω {int(avg_duration % 60)} —Å–µ–∫\n\n"
                )
            else:
                response_text = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\n"
        else:
            response_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\n"
        
        await message.answer(response_text)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    else:
        await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞—Ç—ã (–ø—Ä–∏–º–µ—Ä: 2025-11-11)")  # –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞

@router.message(Form.date2utm)
async def date2utm(message: types.Message, state: FSMContext):
    dataaa = await state.get_data()
    if is_date(message.text):
        metrika = YandexMetrica(YANDEX_METRIKA_TOKEN)

        params = {
            "ids": COUNTER_ID,
            "metrics": "ym:s:visits",
            "dimensions": "ym:s:UTMSource,ym:s:UTMMedium,ym:s:UTMCampaign",
            "date1": dataaa.get('date1utm'),
            "date2": message.text,
            "accuracy": "full"
        }

        data = metrika.get_data(COUNTER_ID, params)
        print("Raw data from Yandex Metrica:")
        print(data)

        response_text = ""

        # --- –°–≤–æ–¥–∫–∞ –ø–æ UTM –º–µ—Ç–∫–∞–º ---
        utm_summary_text = " üìä –°–≤–æ–¥–∫–∞ –ø–æ UTM –º–µ—Ç–∫–∞–º:\n"
        utm_data_found = False

        if data and data['data']:
            for row in data['data']:
                if 'dimensions' in row and 'metrics' in row:
                    dimensions = row['dimensions']
                    metrics = row['metrics']

                    print("DEBUG: dimensions =", dimensions)  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥

                    utm_source = "N/A"
                    utm_medium = "N/A"
                    utm_campaign = "N/A"

                    if dimensions:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ dimensions –Ω–µ –ø—É—Å—Ç–æ–π
                        utm_source = dimensions[0].get('name', 'N/A') if len(dimensions) > 0 else "N/A"
                        utm_medium = dimensions[1].get('name', 'N/A') if len(dimensions) > 1 else "N/A"
                        utm_campaign = dimensions[2].get('name', 'N/A') if len(dimensions) > 2 else "N/A"

                    visits_utm = metrics[0] if metrics else 0
                    utm_summary_text += f"- üîó –ò—Å—Ç–æ—á–Ω–∏–∫: {utm_source}, üì° –ö–∞–Ω–∞–ª: {utm_medium}, üéØ –ö–∞–º–ø–∞–Ω–∏—è: {utm_campaign} - üëÅ –ü–æ—Å–µ—â–µ–Ω–∏—è: {int(visits_utm)}\n"
                    utm_data_found = True

            if utm_data_found:
                response_text += utm_summary_text
        else:
            response_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\n"
            print("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ data['data']")

        await message.answer(response_text)
        await state.clear()
    else:
        await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞—Ç—ã (–ø—Ä–∏–º–µ—Ä: 2025-11-11)")

async def date21(message: types.Message):
    metrika = YandexMetrica(YANDEX_METRIKA_TOKEN)  # –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç API

    params = {
        "ids": COUNTER_ID,
        "metrics": "ym:s:visits,ym:s:pageviews,ym:s:users,ym:s:newUsers,ym:s:bounceRate,ym:s:avgVisitDurationSeconds",
        "date1": "1daysAgo", # –î–∞—Ç–∞ —Å–æ –≤—á–µ—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è
        "date2": "today",
        "accuracy": "full"
    }

    data = metrika.get_data(COUNTER_ID, params)  # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    print("Raw data from Yandex Metrica:")
    print(data)  # –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

    response_text = ""  # –°—Ç—Ä–æ–∫–∞ –æ—Ç–≤–µ—Ç–∞

    if data and data['data']:  # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã
        report_data = data['data'][0]
        
        metrics_data = report_data.get('metrics')  # –î–æ—Å—Ç–∞—ë–º –º–µ—Ç—Ä–∏–∫–∏
        if metrics_data and isinstance(metrics_data, list):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
            visits = metrics_data[0] if len(metrics_data) > 0 else 0  # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            pageviews = metrics_data[1] if len(metrics_data) > 1 else 0
            users = metrics_data[2] if len(metrics_data) > 2 else 0
            new_users = metrics_data[3] if len(metrics_data) > 3 else 0
            bounce_rate = metrics_data[4] if len(metrics_data) > 4 else 0
            avg_duration = metrics_data[5] if len(metrics_data) > 5 else 0
            
            response_text = (
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫: –í—á–µ—Ä–∞ - –°–µ–≥–æ–¥–Ω—è\n\n"
                f"üëÅ –ü–æ—Å–µ—â–µ–Ω–∏—è: {int(visits)}\n"
                f"üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü: {int(pageviews)}\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {int(users)}\n"
                f"üÜï –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {int(new_users)}\n"
                f"üìâ –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–∫–∞–∑–æ–≤: {bounce_rate:.2f}%\n"
                f"‚è±Ô∏è –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–∑–∏—Ç–∞: {int(avg_duration // 60)} –º–∏–Ω {int(avg_duration % 60)} —Å–µ–∫\n\n"
            )
        else:
            response_text = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\n"
    else:
        response_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\n"
    
    await message.answer(response_text)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

async def date27(message: types.Message):
    metrika = YandexMetrica(YANDEX_METRIKA_TOKEN)  # –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç API

    params = {
        "ids": COUNTER_ID,
        "metrics": "ym:s:visits,ym:s:pageviews,ym:s:users,ym:s:newUsers,ym:s:bounceRate,ym:s:avgVisitDurationSeconds",
        "date1": "7daysAgo", # –î–∞—Ç–∞ –∑–∞ –Ω–µ–¥–µ–ª—é
        "date2": "today",
        "accuracy": "full"
    }

    data = metrika.get_data(COUNTER_ID, params)  # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    print("Raw data from Yandex Metrica:")
    print(data)  # –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

    response_text = ""  # –°—Ç—Ä–æ–∫–∞ –æ—Ç–≤–µ—Ç–∞

    if data and data['data']:  # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã
        report_data = data['data'][0]
        
        metrics_data = report_data.get('metrics')  # –î–æ—Å—Ç–∞—ë–º –º–µ—Ç—Ä–∏–∫–∏
        if metrics_data and isinstance(metrics_data, list):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
            visits = metrics_data[0] if len(metrics_data) > 0 else 0  # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            pageviews = metrics_data[1] if len(metrics_data) > 1 else 0
            users = metrics_data[2] if len(metrics_data) > 2 else 0
            new_users = metrics_data[3] if len(metrics_data) > 3 else 0
            bounce_rate = metrics_data[4] if len(metrics_data) > 4 else 0
            avg_duration = metrics_data[5] if len(metrics_data) > 5 else 0
            
            response_text = (
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é:\n\n"
                f"üëÅ –ü–æ—Å–µ—â–µ–Ω–∏—è: {int(visits)}\n"
                f"üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü: {int(pageviews)}\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {int(users)}\n"
                f"üÜï –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {int(new_users)}\n"
                f"üìâ –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–∫–∞–∑–æ–≤: {bounce_rate:.2f}%\n"
                f"‚è±Ô∏è –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–∑–∏—Ç–∞: {int(avg_duration // 60)} –º–∏–Ω {int(avg_duration % 60)} —Å–µ–∫\n\n"
            )
        else:
            response_text = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\n"
    else:
        response_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\n"
    
    await message.answer(response_text)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

async def date2month(message: types.Message):
    metrika = YandexMetrica(YANDEX_METRIKA_TOKEN)  # –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç API

    params = {
        "ids": COUNTER_ID,
        "metrics": "ym:s:visits,ym:s:pageviews,ym:s:users,ym:s:newUsers,ym:s:bounceRate,ym:s:avgVisitDurationSeconds",
        "date1": start_date, # –î–∞—Ç–∞ –∑–∞ –º–µ—Å—è—Ü
        "date2": end_date,
        "accuracy": "full"
    }

    data = metrika.get_data(COUNTER_ID, params)  # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    print("Raw data from Yandex Metrica:")
    print(data)  # –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

    response_text = ""  # –°—Ç—Ä–æ–∫–∞ –æ—Ç–≤–µ—Ç–∞

    if data and data['data']:  # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã
        report_data = data['data'][0]
        
        metrics_data = report_data.get('metrics')  # –î–æ—Å—Ç–∞—ë–º –º–µ—Ç—Ä–∏–∫–∏
        if metrics_data and isinstance(metrics_data, list):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
            visits = metrics_data[0] if len(metrics_data) > 0 else 0  # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            pageviews = metrics_data[1] if len(metrics_data) > 1 else 0
            users = metrics_data[2] if len(metrics_data) > 2 else 0
            new_users = metrics_data[3] if len(metrics_data) > 3 else 0
            bounce_rate = metrics_data[4] if len(metrics_data) > 4 else 0
            avg_duration = metrics_data[5] if len(metrics_data) > 5 else 0
            
            response_text = (
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü:\n\n"
                f"üëÅ –ü–æ—Å–µ—â–µ–Ω–∏—è: {int(visits)}\n"
                f"üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü: {int(pageviews)}\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {int(users)}\n"
                f"üÜï –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {int(new_users)}\n"
                f"üìâ –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–∫–∞–∑–æ–≤: {bounce_rate:.2f}%\n"
                f"‚è±Ô∏è –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–∑–∏—Ç–∞: {int(avg_duration // 60)} –º–∏–Ω {int(avg_duration % 60)} —Å–µ–∫\n\n"
            )
        else:
            response_text = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\n"
    else:
        response_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\n"
    
    await message.answer(response_text)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

async def date2utm1(message: types.Message):
    metrika = YandexMetrica(YANDEX_METRIKA_TOKEN)

    params = {
        "ids": COUNTER_ID,
        "metrics": "ym:s:visits",
        "dimensions": "ym:s:UTMSource,ym:s:UTMMedium,ym:s:UTMCampaign",
        "date1": "1daysAgo", # –î–∞—Ç–∞ —Å–æ –≤—á–µ—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è
        "date2": "today",
        "accuracy": "full"
    }

    data = metrika.get_data(COUNTER_ID, params)
    print("Raw data from Yandex Metrica:")
    print(data)

    response_text = ""

    # --- –°–≤–æ–¥–∫–∞ –ø–æ UTM –º–µ—Ç–∫–∞–º ---
    utm_summary_text = " üìä –°–≤–æ–¥–∫–∞ –ø–æ UTM –º–µ—Ç–∫–∞–º –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å:\n"
    utm_data_found = False

    if data and data['data']:
        for row in data['data']:
            if 'dimensions' in row and 'metrics' in row:
                dimensions = row['dimensions']
                metrics = row['metrics']

                print("DEBUG: dimensions =", dimensions)  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥

                utm_source = "N/A"
                utm_medium = "N/A"
                utm_campaign = "N/A"

                if dimensions:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ dimensions –Ω–µ –ø—É—Å—Ç–æ–π
                    utm_source = dimensions[0].get('name', 'N/A') if len(dimensions) > 0 else "N/A"
                    utm_medium = dimensions[1].get('name', 'N/A') if len(dimensions) > 1 else "N/A"
                    utm_campaign = dimensions[2].get('name', 'N/A') if len(dimensions) > 2 else "N/A"

                visits_utm = metrics[0] if metrics else 0
                utm_summary_text += f"- üîó –ò—Å—Ç–æ—á–Ω–∏–∫: {utm_source}, üì° –ö–∞–Ω–∞–ª: {utm_medium}, üéØ –ö–∞–º–ø–∞–Ω–∏—è: {utm_campaign} - üëÅ –ü–æ—Å–µ—â–µ–Ω–∏—è: {int(visits_utm)}\n"
                utm_data_found = True

        if utm_data_found:
            response_text += utm_summary_text
    else:
        response_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\n"
        print("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ data['data']")

    await message.answer(response_text)

async def date2utm7(message: types.Message):
    metrika = YandexMetrica(YANDEX_METRIKA_TOKEN)

    params = {
        "ids": COUNTER_ID,
        "metrics": "ym:s:visits",
        "dimensions": "ym:s:UTMSource,ym:s:UTMMedium,ym:s:UTMCampaign",
        "date1": "7daysAgo", # –î–∞—Ç–∞ –∑–∞ –Ω–µ–¥–µ–ª—é
        "date2": "today",
        "accuracy": "full"
    }

    data = metrika.get_data(COUNTER_ID, params)
    print("Raw data from Yandex Metrica:")
    print(data)

    response_text = ""

    # --- –°–≤–æ–¥–∫–∞ –ø–æ UTM –º–µ—Ç–∫–∞–º ---
    utm_summary_text = " üìä –°–≤–æ–¥–∫–∞ –ø–æ UTM –º–µ—Ç–∫–∞–º –∑–∞ –Ω–µ–¥–µ–ª—é:\n"
    utm_data_found = False

    if data and data['data']:
        for row in data['data']:
            if 'dimensions' in row and 'metrics' in row:
                dimensions = row['dimensions']
                metrics = row['metrics']

                print("DEBUG: dimensions =", dimensions)  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥

                utm_source = "N/A"
                utm_medium = "N/A"
                utm_campaign = "N/A"

                if dimensions:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ dimensions –Ω–µ –ø—É—Å—Ç–æ–π
                    utm_source = dimensions[0].get('name', 'N/A') if len(dimensions) > 0 else "N/A"
                    utm_medium = dimensions[1].get('name', 'N/A') if len(dimensions) > 1 else "N/A"
                    utm_campaign = dimensions[2].get('name', 'N/A') if len(dimensions) > 2 else "N/A"

                visits_utm = metrics[0] if metrics else 0
                utm_summary_text += f"- üîó –ò—Å—Ç–æ—á–Ω–∏–∫: {utm_source}, üì° –ö–∞–Ω–∞–ª: {utm_medium}, üéØ –ö–∞–º–ø–∞–Ω–∏—è: {utm_campaign} - üëÅ –ü–æ—Å–µ—â–µ–Ω–∏—è: {int(visits_utm)}\n"
                utm_data_found = True

        if utm_data_found:
            response_text += utm_summary_text
    else:
        response_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\n"
        print("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ data['data']")

    await message.answer(response_text)

async def date2utmmonth(message: types.Message):
    metrika = YandexMetrica(YANDEX_METRIKA_TOKEN)

    params = {
        "ids": COUNTER_ID,
        "metrics": "ym:s:visits",
        "dimensions": "ym:s:UTMSource,ym:s:UTMMedium,ym:s:UTMCampaign",
        "date1": start_date, # –î–∞—Ç–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
        "date2": end_date,
        "accuracy": "full"
    }

    data = metrika.get_data(COUNTER_ID, params)
    print("Raw data from Yandex Metrica:")
    print(data)

    response_text = ""

    # --- –°–≤–æ–¥–∫–∞ –ø–æ UTM –º–µ—Ç–∫–∞–º ---
    utm_summary_text = " üìä –°–≤–æ–¥–∫–∞ –ø–æ UTM –º–µ—Ç–∫–∞–º –∑–∞ –º–µ—Å—è—Ü:\n"
    utm_data_found = False

    if data and data['data']:
        for row in data['data']:
            if 'dimensions' in row and 'metrics' in row:
                dimensions = row['dimensions']
                metrics = row['metrics']

                print("DEBUG: dimensions =", dimensions)  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥

                utm_source = "N/A"
                utm_medium = "N/A"
                utm_campaign = "N/A"

                if dimensions:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ dimensions –Ω–µ –ø—É—Å—Ç–æ–π
                    utm_source = dimensions[0].get('name', 'N/A') if len(dimensions) > 0 else "N/A"
                    utm_medium = dimensions[1].get('name', 'N/A') if len(dimensions) > 1 else "N/A"
                    utm_campaign = dimensions[2].get('name', 'N/A') if len(dimensions) > 2 else "N/A"

                visits_utm = metrics[0] if metrics else 0
                utm_summary_text += f"- üîó –ò—Å—Ç–æ—á–Ω–∏–∫: {utm_source}, üì° –ö–∞–Ω–∞–ª: {utm_medium}, üéØ –ö–∞–º–ø–∞–Ω–∏—è: {utm_campaign} - üëÅ –ü–æ—Å–µ—â–µ–Ω–∏—è: {int(visits_utm)}\n"
                utm_data_found = True

        if utm_data_found:
            response_text += utm_summary_text
    else:
        response_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\n"
        print("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ data['data']")

    await message.answer(response_text)

@router.callback_query() # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±–µ–∫–æ–≤
async def process_callback(callback_query: CallbackQuery, state: FSMContext): 
    data = callback_query.data
    global choicestat # –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∫–∞–∫ –≥–ª–æ–±–∞–ª—å–Ω—É—é

    if data == "checkstat":
        choicestat = "standart" # –ò–∑–º–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–µ–∑ UTM –º–µ—Ç–æ–∫
        await callback_query.bot.edit_message_text(
            text="‚òëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫, –∑–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            reply_markup=choice
        )

    if data == "checkstatutm":
        choicestat = "utm" # –ò–∑–º–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –Ω–∞ UTM, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å UTM –º–µ—Ç–∫–∞–º–∏
        await callback_query.bot.edit_message_text(
            text="‚òëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫, –∑–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            reply_markup=choice
        )

    if data == "yesterday":
        if choicestat == "standart": # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–≤–Ω–∞ –ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –∑–Ω–∞—á–µ–Ω–∏—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç
            await date21(callback_query.message) # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–µ–∑ UTM –º–µ—Ç–æ–∫ —Å–æ –≤—á–µ—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è
        else: # –ò–Ω–∞—á–µ, –µ—Å–ª–∏ –Ω–µ —Ä–∞–≤–Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É
            await date2utm1(callback_query.message) # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å UTM –º–µ—Ç–∫–∞–º–∏ —Å–æ –≤—á–µ—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è

    if data == "week":
        if choicestat == "standart":
            await date27(callback_query.message)
        else:
            await date2utm7(callback_query.message)

    if data == "month":
        if choicestat == "standart":
            await date2month(callback_query.message)
        else:
            await date2utmmonth(callback_query.message)

    if data == "otherdate":
        if choicestat == "standart":
            await state.set_state(Form.date1) # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ date1
        else:
            await state.set_state(Form.date1utm) # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ date1utm
        await callback_query.message.answer("‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É —Å –∫–∞–∫–æ–≥–æ —á–∏—Å–ª–∞, –º–µ—Å—è—Ü–∞ –∏ –≥–æ–¥ –Ω—É–∂–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–ø—Ä–∏–º–µ—Ä: 2025-02-01)")

async def main():
    dp.include_router(router) # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
    await dp.start_polling(bot) # –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO) # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
    try:
        asyncio.run(main()) # –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é main –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
    except KeyboardInterrupt:
        print('–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω')
import logging
import asyncio
import os
import string
import requests

from aiogram import Bot, Dispatcher, Router, types
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

class Form(StatesGroup):
    date1 = State()
    date2 = State()
    date1utm = State()
    date2utm = State()

choicestart = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üìä –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∞–π—Ç–∞ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥", callback_data="checkstat")],
    [InlineKeyboardButton(text="üìä –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∞–π—Ç–∞ —Å UTM –º–µ—Ç–∫–∞–º–∏", callback_data="checkstatutm")]
]) # –ö–Ω–æ–ø–∫–∏

logging.basicConfig(level=logging.INFO)

BOT_TOKEN = os.environ["TOKEN"]

bot = Bot(token=BOT_TOKEN) # —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥–µ
dp = Dispatcher() # –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
router = Router() # –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–æ—É—Ç–µ—Ä–∞
YANDEX_METRIKA_TOKEN = 'y0__xCqiIblBxiluzUgzPXSrBImnXWxjnlSv8r8kX6xHGJJeR6sjg'
COUNTER_ID = '100012253'

class YandexMetrica:
    def __init__(self, token):  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ __init__
        self.token = token
        self.base_url = "https://api-metrika.yandex.net/stat/v1/data"

    def get_data(self, counter_id, params):
        headers = {
            "Authorization": f"OAuth {self.token}"
        }
        params['ids'] = counter_id
        response = requests.get(self.base_url, headers=headers, params=params)
        print(response)

        if response.status_code == 200:
            return response.json()
        else:
            logging.error(f"Error: {response.status_code}, {response.text}")
            if response.status_code == 403:
                logging.error("Access Denied: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—á–µ—Ç—á–∏–∫—É.")
            return None

def is_date(text):
    allowed_chars = string.digits + "-"
    for char in text:
        if char not in allowed_chars:
            return False
    return True

@router.message(CommandStart())
async def start_command(message: types.Message):
    await message.answer("ü§ñ –≠—Ç–æ –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ø–Ω–¥–µ–∫—Å –ú–µ—Ç—Ä–∏–∫–æ–π. –ù–∞–∂–º–∏ –Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.", reply_markup=choicestart)

@router.message(Form.date1)
async def date1(message: types.Message, state: FSMContext):
    if is_date(message.text):
        await state.update_data(date1=message.text)
        await state.set_state(Form.date2)
        await message.answer("‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É –ø–æ –∫–∞–∫–æ–µ —á–∏—Å–ª–æ, –º–µ—Å—è—Ü –∏ –≥–æ–¥ –Ω—É–∂–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–ø—Ä–∏–º–µ—Ä: 2025-02-28)")
    else:
        await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞—Ç—ã (–ø—Ä–∏–º–µ—Ä: 2025-11-11)")

@router.message(Form.date1utm)
async def date1utm(message: types.Message, state: FSMContext):
    if is_date(message.text):
        await state.update_data(date1utm=message.text)
        await state.set_state(Form.date2utm)
        await message.answer("‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É –ø–æ –∫–∞–∫–æ–µ —á–∏—Å–ª–æ, –º–µ—Å—è—Ü –∏ –≥–æ–¥ –Ω—É–∂–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–ø—Ä–∏–º–µ—Ä: 2025-02-28)")
    else:
        await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞—Ç—ã (–ø—Ä–∏–º–µ—Ä: 2025-11-11)")

@router.message(Form.date2)
async def date2(message: types.Message, state: FSMContext):
    dataaa = await state.get_data()
    if is_date(message.text):
        metrika = YandexMetrica(YANDEX_METRIKA_TOKEN)

        params = {
            "ids": COUNTER_ID,
            "metrics": "ym:s:visits,ym:s:pageviews,ym:s:users,ym:s:newUsers,ym:s:bounceRate,ym:s:avgVisitDurationSeconds",
            "date1": dataaa.get('date1'),
            "date2": message.text,
            "accuracy": "full"
        }

        data = metrika.get_data(COUNTER_ID, params)
        print("Raw data from Yandex Metrica:")
        print(data)

        response_text = ""

        if data and data['data']:
            report_data = data['data'][0]

            metrics_data = report_data.get('metrics')
            if metrics_data and isinstance(metrics_data, list):
                visits = metrics_data[0] if len(metrics_data) > 0 else 0
                pageviews = metrics_data[1] if len(metrics_data) > 1 else 0
                users = metrics_data[2] if len(metrics_data) > 2 else 0
                new_users = metrics_data[3] if len(metrics_data) > 3 else 0
                bounce_rate = metrics_data[4] if len(metrics_data) > 4 else 0
                avg_duration = metrics_data[5] if len(metrics_data) > 5 else 0

                response_text = (
                    f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫: {dataaa.get('date1')} - {message.text}\n\n"
                    f"üëÅ –ü–æ—Å–µ—â–µ–Ω–∏—è: {int(visits)}\n"
                    f"üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü: {int(pageviews)}\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {int(users)}\n"
                    f"üÜï –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {int(new_users)}\n"
                    f"üìâ –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–∫–∞–∑–æ–≤: {bounce_rate:.2f}%\n"
                    f"‚è±Ô∏è –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–∑–∏—Ç–∞: {int(avg_duration // 60)} –º–∏–Ω {int(avg_duration % 60)} —Å–µ–∫\n\n"
                )
            else:
                response_text = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\n"
                print("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç metrics_data:", metrics_data)
        else:
            response_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\n"
            print("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ data['data']")

        await message.answer(response_text)
        await state.clear()
    else:
        await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞—Ç—ã (–ø—Ä–∏–º–µ—Ä: 2025-11-11)")

@router.message(Form.date2utm)
async def date2utm(message: types.Message, state: FSMContext):
    dataaa = await state.get_data()
    if is_date(message.text):
        metrika = YandexMetrica(YANDEX_METRIKA_TOKEN)

        params = {
            "ids": COUNTER_ID,
            "metrics": "ym:s:visits",
            "dimensions": "ym:s:UTMSource,ym:s:UTMMedium,ym:s:UTMCampaign",
            "date1": dataaa.get('date1utm'),
            "date2": message.text,
            "accuracy": "full"
        }

        data = metrika.get_data(COUNTER_ID, params)
        print("Raw data from Yandex Metrica:")
        print(data)

        response_text = ""

        # --- –°–≤–æ–¥–∫–∞ –ø–æ UTM –º–µ—Ç–∫–∞–º ---
        utm_summary_text = " üìä –°–≤–æ–¥–∫–∞ –ø–æ UTM –º–µ—Ç–∫–∞–º:\n"
        utm_data_found = False

        if data and data['data']:
            for row in data['data']:
                if 'dimensions' in row and 'metrics' in row:
                    dimensions = row['dimensions']
                    metrics = row['metrics']

                    print("DEBUG: dimensions =", dimensions)  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥

                    utm_source = "N/A"
                    utm_medium = "N/A"
                    utm_campaign = "N/A"

                    if dimensions:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ dimensions –Ω–µ –ø—É—Å—Ç–æ–π
                        utm_source = dimensions[0].get('name', 'N/A') if len(dimensions) > 0 else "N/A"
                        utm_medium = dimensions[1].get('name', 'N/A') if len(dimensions) > 1 else "N/A"
                        utm_campaign = dimensions[2].get('name', 'N/A') if len(dimensions) > 2 else "N/A"

                    visits_utm = metrics[0] if metrics else 0
                    utm_summary_text += f"- üîó –ò—Å—Ç–æ—á–Ω–∏–∫: {utm_source}, üì° –ö–∞–Ω–∞–ª: {utm_medium}, üéØ –ö–∞–º–ø–∞–Ω–∏—è: {utm_campaign} - üëÅ –ü–æ—Å–µ—â–µ–Ω–∏—è: {int(visits_utm)}\n"
                    utm_data_found = True

            if utm_data_found:
                response_text += utm_summary_text
        else:
            response_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\n"
            print("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ data['data']")

        await message.answer(response_text)
        await state.clear()
    else:
        await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞—Ç—ã (–ø—Ä–∏–º–µ—Ä: 2025-11-11)")

@router.callback_query() # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±–µ–∫–æ–≤
async def process_callback(callback_query: CallbackQuery, state: FSMContext): 
    data = callback_query.data

    if data == "checkstat":
        await state.set_state(Form.date1)
        await callback_query.message.answer("‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É —Å –∫–∞–∫–æ–≥–æ —á–∏—Å–ª–∞, –º–µ—Å—è—Ü–∞ –∏ –≥–æ–¥ –Ω—É–∂–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–ø—Ä–∏–º–µ—Ä: 2025-02-01)")

    if data == "checkstatutm":
        await state.set_state(Form.date1utm)
        await callback_query.message.answer("‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É —Å –∫–∞–∫–æ–≥–æ —á–∏—Å–ª–∞, –º–µ—Å—è—Ü–∞ –∏ –≥–æ–¥ –Ω—É–∂–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–ø—Ä–∏–º–µ—Ä: 2025-02-01)")

async def main():
    dp.include_router(router) # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
    await dp.start_polling(bot) # –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO) # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
    try:
        asyncio.run(main()) # –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é main –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
    except KeyboardInterrupt:
        print('–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω')